Given markdown;
# a

Execute (Toc does not set nomodifiable on other files):
  " Sanity check.
  Assert &modifiable

  :Toc
  :lclose
  :edit a

  Assert &modifiable

Given markdown;
header 1
========

test

header 2
--------

test

### header 3

test

Execute (Toc setex headers):
  :Toc
  :setl modifiable
  :%s/\m^\([^|]*|\)\{2} //
  :setl nomodifiable nomodified

Expect (setex headers):
  1# header 1
  2# header 2
  3# header 3

Given markdown;
# header 1

test

## header 2

test

### header 3

test

Execute (Toc atx headers):
  :Toc
  :setl modifiable
  :%s/\m^\([^|]*|\)\{2} //
  :setl nomodifiable nomodified

Expect (atx headers):
  1# header 1
  2# header 2
  3# header 3

Given markdown;
ATX tests.

# h1 space

#h1 nospace

#  h1 2 spaces

# h1 trailing hash #

## h2 space

##h2 nospace

## h2 trailing hash ##

### h3 space

###h3 nospace

### h3 trailing hash ###

#### h4

##### h5

###### h6

---

Relative positions.

# h1 before h2

## h2 between h1s

# h1 after h2

---

Setex tests.

setex h1
========

setex h2
--------

setex h1 single punctuation
=

setex h1 punctuation longer than header
================================

Prevent list vs Setex confusion:

- not Setex
- because list

---

Mixed tests.

setex h1 before atx
===================

## atx h2

### atx h3

# atx h1

setex h2
------------------

### atx h3 2

Execute (Toc multiple headers):
  :Toc
  :setl modifiable
  :%s/\m^\([^|]*|\)\{2} //
  :setl nomodifiable nomodified

Expect (multiple headers):
  1# h1 space
  1# h1 nospace
  1# h1 2 spaces
  1# h1 trailing hash
  2# h2 space
  2# h2 nospace
  2# h2 trailing hash
  3# h3 space
  3# h3 nospace
  3# h3 trailing hash
  4# h4
  5# h5
  6# h6
  1# h1 before h2
  2# h2 between h1s
  1# h1 after h2
  1# setex h1
  2# setex h2
  1# setex h1 single punctuation
  1# setex h1 punctuation longer than header
  1# setex h1 before atx
  2# atx h2
  3# atx h3
  1# atx h1
  2# setex h2
  3# atx h3 2

Execute:
  :lclose

Given markdown;
# header 1

## header 2

### header 3

Execute (Toc cursor on the current header):
  normal! G
  :Toc
  AssertEqual line('.'), 3
  :lclose
